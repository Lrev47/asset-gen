// MediaForge - Dynamic Media Creation Platform
// Prisma Schema - No Enums, Fully Dynamic

generator client {
  provider = "prisma-client-js"
}

// generator zod {
//   provider                         = "zod-prisma-types"
//   output                           = "./generated/zod"
//   createInputTypes                 = true
//   addInputTypeValidation           = true
//   createOptionalDefaultValuesTypes = true
//   createRelationValuesTypes        = true
//   useDefaultValidators             = true
//   writeBarrelFiles                 = true
//   coerceDate                       = true
//   createModelTypes                 = true
// }

// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "./generated/erd/schema.svg"
//   theme    = "default"
// }

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "./generated/dbml/schema.dbml"
}

generator json {
  provider              = "prisma-json-schema-generator"
  output                = "./generated/json"
  includeRequiredFields = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== CORE MODELS ====================

model User {
  id          String  @id @default(cuid())
  email       String  @unique
  name        String?
  avatarUrl   String?
  preferences Json    @default("{}")

  media       Media[]
  generations Generation[]
  apiKeys     ApiKey[]
  userModels  UserModel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model UserModel {
  id          String   @id @default(cuid())
  userId      String
  modelSlug   String   // e.g., "black-forest-labs/flux-1.1-pro"
  modelName   String   // cached for display
  modelType   String   // image/video/audio/text/utility
  coverImageUrl String? // cached from AiModel/Replicate API
  addedAt     DateTime @default(now())
  lastUsedAt  DateTime?
  settings    Json?    // user's default parameters for this model
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, modelSlug])
  @@index([userId])
  @@index([modelType])
  @@map("user_models")
}


// ==================== MEDIA MODELS ====================

model Media {
  id           String   @id @default(cuid())
  name         String
  type         String // "image", "video", "audio", "document" (dynamic)
  format       String // "png", "mp4", "mp3", "pdf", etc.
  url          String // Storage URL
  thumbnailUrl String?
  metadata     Json // Dimensions, duration, file size, etc.
  tags         String[] // Array of tags for searching

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  generationId String?     @unique
  generation   Generation? @relation(fields: [generationId], references: [id], onDelete: SetNull)

  versions MediaVersion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([type])
  @@index([tags])
  @@map("media")
}

model MediaVersion {
  id        String  @id @default(cuid())
  version   Int
  url       String
  metadata  Json
  changelog String?

  mediaId String
  media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([mediaId, version])
  @@index([mediaId])
  @@map("media_versions")
}

// ==================== AI MODEL MANAGEMENT ====================

model AiModel {
  id         String @id @default(cuid())
  slug       String @unique  // e.g., "black-forest-labs/flux-1.1-pro"
  provider   String // "replicate", "openai", etc.
  type       String // "text", "image", "video", "audio", "utility"
  
  // Minimal cached data for performance
  name       String?
  costPerUse Float?
  coverImageUrl String? // Cached from Replicate API
  
  // Extended configuration fields
  capabilities Json? // Model features, operations, and constraints
  config       Json? // Provider-specific config (replicateId, inputSchema, etc)
  parameters   Json? // Default model parameters
  limits       Json? // Model constraints and limits

  generations  Generation[]
  modelMetrics ModelMetric[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([provider])
  @@index([type])
  @@map("ai_models")
}

model ModelMetric {
  id          String   @id @default(cuid())
  date        DateTime
  usageCount  Int      @default(0)
  totalCost   Float    @default(0)
  avgLatency  Int // in milliseconds
  errorCount  Int      @default(0)
  successRate Float    @default(100)

  modelId String
  model   AiModel @relation(fields: [modelId], references: [id], onDelete: Cascade)

  @@unique([modelId, date])
  @@index([modelId])
  @@index([date])
  @@map("model_metrics")
}


// ==================== GENERATION MODELS ====================

model Generation {
  id     String @id @default(cuid())
  type   String // "single", "multi", "variation"
  status String @default("pending") // "pending", "processing", "completed", "failed"

  input    Json // Generation parameters
  output   Json? // Results, errors, etc.
  cost     Float?
  duration Int? // Processing time in ms

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  modelId String
  model   AiModel @relation(fields: [modelId], references: [id])

  media Media?

  parentId String?
  parent   Generation?  @relation("GenerationChain", fields: [parentId], references: [id])
  children Generation[] @relation("GenerationChain")

  createdAt   DateTime  @default(now())
  completedAt DateTime?

  @@index([userId])
  @@index([modelId])
  @@index([status])
  @@index([type])
  @@map("generations")
}

// ==================== CONFIGURATION MODELS ====================

model ApiKey {
  id       String @id @default(cuid())
  name     String
  provider String // "openai", "replicate", etc.
  key      String // Encrypted
  status   String @default("active") // "active", "inactive", "expired"

  usageLimit Float?
  usageCount Float     @default(0)
  lastUsed   DateTime?
  expiresAt  DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([provider])
  @@index([status])
  @@map("api_keys")
}





